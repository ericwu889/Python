# to report infection chain

InfectedCaseDict = {} # Original case data, two columns consist of PersonID, infected by PersonID
InfectedPersonSet = set() # Staging variable, to host people infected, set of PersonID
InfectedCaseChainDict = {} # Final infected case chain, dictionary of PersonID, and a set of infected PersonID -- InfectedPersonSet

def traverseInfectionChain(PersonID):
    InfectedCaseChainDict[PersonID].update(InfectedPersonSet)
    # InfectedCaseChainDict[PersonID] = InfectedPersonSet

    if int(InfectedCaseDict[PersonID]) != 0: # root of chain, patient 0
        InfectedPersonSet.add(PersonID) # No. Add self to person infected
        traverseInfectionChain(InfectedCaseDict[PersonID]) # go to person who infected this person

# Make the original case data. PersonID, Infected by PersonID
InfectedCaseDict = {1:0, 2:1, 3:1, 4:1, 5:2, 6:2, 7:3, 8:7, 9:7, 10:7, 11:9
                    , 12:9, 13:12, 14:1, 15:12, 100:0, 101:100, 102:100, 103:101, 16:4}

for PersonID in InfectedCaseDict:
    InfectedPersonSet = set()
    InfectedCaseChainDict[PersonID] = set()

    traverseInfectionChain(PersonID)

for PersonID in InfectedCaseDict:
    if InfectedCaseChainDict[PersonID].__len__() > 1:
        print('Person ', PersonID, 'Infected ', InfectedCaseChainDict[PersonID].__len__()
          , ' People, they are ', InfectedCaseChainDict[PersonID])

    if InfectedCaseChainDict[PersonID].__len__() == 1:
        print('Person ', PersonID, 'Infected 1 person, he / she is ', InfectedCaseChainDict[PersonID])

    if InfectedCaseChainDict[PersonID].__len__()  == 0:
        print('Person ', PersonID, 'Infected no one.')

